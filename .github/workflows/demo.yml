name: demo

on:
  push:
  workflow_dispatch:

jobs:
  run-demo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (if any)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # If you later add packaging (pyproject.toml/setup.py) you can do:
          # pip install -e .

      # Make the repo importable even if it's not packaged
      - name: Add paths to PYTHONPATH
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE:$GITHUB_WORKSPACE/trj_opt_ultimate" >> $GITHUB_ENV
          echo "Added PYTHONPATH=$GITHUB_WORKSPACE:$GITHUB_WORKSPACE/trj_opt_ultimate"

      # Detect which module path exposes your CLI (no heredocs, just Bash)
      - name: Detect CLI module
        run: |
          set -e
          MODULE=""
          if python -c "import trj_opt as _"; then
            if python -m trj_opt.cli --help >/dev/null 2>&1; then MODULE="trj_opt.cli"; fi
          fi
          if [ -z "$MODULE" ] && python -c "import trj_opt_ultimate as _"; then
            if python -m trj_opt_ultimate.cli --help >/dev/null 2>&1; then MODULE="trj_opt_ultimate.cli"; fi
          fi
          if [ -z "$MODULE" ]; then
            # common nested layout: trj_opt_ultimate/trj_opt/cli.py
            if python -m trj_opt_ultimate.trj_opt.cli --help >/dev/null 2>&1; then MODULE="trj_opt_ultimate.trj_opt.cli"; fi
          fi
          if [ -z "$MODULE" ]; then
            echo "Could not find a CLI module (trj_opt.cli, trj_opt_ultimate.cli, or trj_opt_ultimate.trj_opt.cli)."
            echo "Check where your cli.py lives and that it’s importable."
            exit 1
          fi
          echo "MODULE=$MODULE" >> $GITHUB_ENV
          echo "Detected MODULE=$MODULE"

      - name: Sanity check CLI
        run: |
          echo "Using MODULE=$MODULE"
          python -m $MODULE --help

      - name: Run demo (built-in if available)
        run: |
          set -e
          mkdir -p trj_opt_out
          if python -m $MODULE demo; then
            echo "Ran built-in demo."
          else
            echo "No 'demo' subcommand — running minimal pipeline."
            # Prefer examples/ if present; fallback to repo root
            TE="examples/run_demo_T.csv";  [ -f "$TE" ]  || TE="run_demo_T.csv"
            DIT="examples/run_demo_Dit.csv"; [ -f "$DIT" ] || DIT="run_demo_Dit.csv"
            # Compute core metrics
            python -m $MODULE compute-rhoc --te_csv "$TE"  --out_json trj_opt_out/rho_c.json
            python -m $MODULE compute-srh  --dit_csv "$DIT" --out_json trj_opt_out/srh.json
            # Optional steps (ignore failure if analyzed CSV isn’t produced by your commands)
            python -m $MODULE plot-pareto --analyzed_csv trj_opt_out/doe_plan_analyzed.csv --out_dir trj_opt_out || true
            python -m $MODULE report      --analyzed_csv trj_opt_out/doe_plan_analyzed.csv --out_dir trj_opt_out || true
          fi

      - name: Upload demo outputs
        uses: actions/upload-artifact@v4
        with:
          name: demo-outputs
          path: |
            trj_opt_out/
            outputs/
            **/*.png
            **/*.pdf
            **/*.json
          if-no-files-found: warn
