name: demo

on:
  push:
  workflow_dispatch:

jobs:
  run-demo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (if any)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Make your code importable even if it's not packaged/installed
      - name: Add repo to PYTHONPATH and detect module name
        shell: bash
        run: |
          # Add common roots to PYTHONPATH (repo root + a likely package dir)
          echo "PYTHONPATH=$GITHUB_WORKSPACE:$GITHUB_WORKSPACE/trj_opt_ultimate" >> $GITHUB_ENV
          export PYTHONPATH="$GITHUB_WORKSPACE:$GITHUB_WORKSPACE/trj_opt_ultimate"

          # Try to find which module name works: trj_opt or trj_opt_ultimate
          set -e
          if python -c "import trj_opt, sys; print('OK: trj_opt')"; then
            echo "MODULE=trj_opt" >> $GITHUB_ENV
          elif python -c "import trj_opt_ultimate, sys; print('OK: trj_opt_ultimate')"; then
            echo "MODULE=trj_opt_ultimate" >> $GITHUB_ENV
          else
            echo "Could not import trj_opt or trj_opt_ultimate. Check package path."
            exit 1
          fi

      - name: Show resolved module
        run: |
          echo "Resolved module name: $MODULE"
          python -c "import os, sys; print('PYTHONPATH=', os.environ.get('PYTHONPATH')); print('sys.path=', sys.path[:3])"

      - name: Sanity check CLI
        run: |
          python -m $MODULE.cli --help || (echo "CLI help failed—verify cli module exists"; exit 1)

      - name: Run demo
        run: |
          mkdir -p trj_opt_out
          # Prefer your built-in demo if it exists:
          if python -m $MODULE.cli demo; then
            echo "Ran built-in demo."
          else
            echo "Falling back to explicit commands…"
            # Adjust CSV locations if yours are under examples/ or repo root
            TE="examples/run_demo_T.csv"
            DIT="examples/run_demo_Dit.csv"
            # If examples/ doesn't exist, fall back to root
            [ -f "$TE" ] || TE="run_demo_T.csv"
            [ -f "$DIT" ] || DIT="run_demo_Dit.csv"

            # Try your documented subcommands first; tweak if your flags differ
            python -m $MODULE.cli compute-rhoc --te_csv "$TE"  --out_json trj_opt_out/rho_c.json
            python -m $MODULE.cli compute-srh  --dit_csv "$DIT" --out_json trj_opt_out/srh.json

            # If you have an analyze step that produces doe_plan_analyzed.csv, call it here.
            # Otherwise skip straight to pareto/report if they work without analyze.
            if python -m $MODULE.cli plot-pareto --help >/dev/null 2>&1; then
              # If plot-pareto needs an analyzed CSV, comment these two lines out
              # and rely on the demo command instead.
              python -m $MODULE.cli plot-pareto --analyzed_csv trj_opt_out/doe_plan_analyzed.csv --out_dir trj_opt_out || true
            fi
            if python -m $MODULE.cli report --help >/dev/null 2>&1; then
              python -m $MODULE.cli report --analyzed_csv trj_opt_out/doe_plan_analyzed.csv --out_dir trj_opt_out || true
            fi
          fi

      - name: Upload demo outputs
        uses: actions/upload-artifact@v4
        with:
          name: demo-outputs
          path: |
            trj_opt_out/
            outputs/
            **/*.png
            **/*.pdf
            **/*.json
          if-no-files-found: warn
